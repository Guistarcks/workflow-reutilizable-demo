name: Test-build-sonar
on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version to use"
        required: true
        type: string
      sonar-scanner:
        description: "SonarQube scan mode"
        required: true
        type: string
        default: ""
      deploy-entorno:
        description: "Default entorno for deployment"
        required: true
        type: string
        default: ""
      base-branches:
        description: "Base branch name for PRs"
        required: true
        type: string
        default: ""
      pr-merged:
        description: "Indicates if the PR was merged"
        required: true
        type: boolean
        default: false
      path-config-json:
        description: "Path to the config.json file"
        required: false
        type: string
        default: "./config.json"
env:
  node-version: ${{ inputs.node-version }}
  sonar-scanner: ${{ inputs.sonar-scanner }}
  deploy-entorno: ${{ inputs.deploy-entorno }}
  base-branches: ${{ inputs.base-branches }}
  pr-merged: ${{ inputs.pr-merged }}
  
jobs:

       
  read-config-json:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-vars.outputs.version }}
      sonar_scanner: ${{ steps.set-vars.outputs.sonar_scanner }}
      entorno: ${{ steps.set-vars.outputs.entorno }}
      modulo-backend: ${{ steps.set-vars.outputs.mod_backend }}
      modulo-frontend: ${{ steps.set-vars.outputs.mod_frontend  }}

    steps:
      - name: Obtener c√≥digo fuente üì•
        uses: actions/checkout@v4

      - name: Read configuration JSON and export variables üìÑ
        id: set-vars
        shell: bash
        run: |
          CONFIG_PATH="${{ inputs.path-config-json }}"
          if [ ! -f "$CONFIG_PATH" ]; then 
            echo "‚ùå Config file not found: $CONFIG_PATH"
            exit 1
          fi 

          echo "üìÑ Reading configuration from: $CONFIG_PATH"

          version=$(jq -r '.version' "$CONFIG_PATH")
          sonar_scanner=$(jq -r '."sonar-scanner"' "$CONFIG_PATH")
          entorno=$(jq -r '.entorno' "$CONFIG_PATH")
          # Exportar cada valor del objeto modulos como variable separada
          mod_backend=$(jq -r '.modulos.backend' "$CONFIG_PATH")
          mod_frontend=$(jq -r '.modulos.frontend' "$CONFIG_PATH")

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "sonar_scanner=$sonar_scanner" >> $GITHUB_OUTPUT
          echo "entorno=$entorno" >> $GITHUB_OUTPUT
          echo "mod_backend=$mod_backend" >> $GITHUB_OUTPUT
          echo "mod_frontend=$mod_frontend" >> $GITHUB_OUTPUT

          echo "üîç sonar_scanner value: $sonar_scanner"
          echo "üîç entorno value: $entorno"
          echo "üîç base-branches value: $base-branches"
          echo "üîç pr-merged value: $pr-merged"

          echo "## üìã Configuration Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $version" >> $GITHUB_STEP_SUMMARY
          echo "**Sonar Scanner:** $sonar_scanner" >> $GITHUB_STEP_SUMMARY
          echo "**Entorno:** $entorno" >> $GITHUB_STEP_SUMMARY
          echo "**M√≥dulo Backend:** $mod_backend" >> $GITHUB_STEP_SUMMARY
          echo "**M√≥dulo Frontend:** $mod_frontend" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Configuration loaded successfully"


  print-inputs:
  needs: read-config-json
  runs-on: ubuntu-latest
  steps:
    - name: Print workflow_call inputs
      run: |
        echo "base-branches: $base-branches"
        echo "pr-merged: $pr-merged"


  test-unitarios:
    needs: [read-config-json]
    if: always() && startsWith(github.ref, 'refs/heads/feature/') || (always() && inputs.pr-merged == true && inputs.base-branches == 'develop') || (always() && inputs.pr-merged == true && inputs.base-branches == 'main')

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: comprobar modulo
        id: check-module
        run: |
          MOD_BACKEND="${{ needs.read-config-json.outputs.modulo-backend }}"
          MOD_FRONTEND="${{ needs.read-config-json.outputs.modulo-frontend }}"

          echo "üîç Debugging variables:"
          echo "MOD_BACKEND: '$MOD_BACKEND'"
          echo "MOD_FRONTEND: '$MOD_FRONTEND'"

          if [[ -n "$MOD_BACKEND" && "$MOD_BACKEND" != "null" ]]; then
            echo "‚úÖ Backend module found: $MOD_BACKEND"
            echo "moduleresult=$MOD_BACKEND" >> $GITHUB_OUTPUT
          elif [[ -n "$MOD_FRONTEND" && "$MOD_FRONTEND" != "null" ]]; then
            echo "‚úÖ Frontend module found: $MOD_FRONTEND"
            echo "moduleresult=$MOD_FRONTEND" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No valid module found. Backend: '$MOD_BACKEND', Frontend: '$MOD_FRONTEND'"
            exit 0
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: "npm"
          cache-dependency-path: "./${{ steps.check-module.outputs.moduleresult }}"

      - name: Install dependencies
        run: npm ci
        working-directory: "./${{ steps.check-module.outputs.moduleresult }}"

      - name: Run tests with coverage
        id: run-tests
        run: npm test -- --coverage --watchAll=false
        working-directory: "./${{ steps.check-module.outputs.moduleresult }}"
        continue-on-error: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: "coverage-reports"
          path: "coverage/"
          retention-days: 30
          working-directory: "./${{ steps.check-module.outputs.moduleresult }}"

      - name: Upload test results
        uses: actions/upload-artifact@v4

        with:
          name: "test-results"
          path: "coverage/lcov.info"
          retention-days: 30
          working-directory: "./${{ steps.check-module.outputs.moduleresult }}"

  sonar-scan:
    needs: [test-unitarios, read-config-json]
    if: always() && startsWith(github.ref, 'refs/heads/release/') || (always() && inputs.pr-merged == true && inputs.base-branches == 'develop' && needs.read-config-json.sonar_scanner != 'skip') || (always() && inputs.pr-merged == true && inputs.base-branches == 'main')

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sonar Qube Scan
        run: echo "SonarQube analysis would run here."

  build:
    needs: [test-unitarios, read-config-json, sonar-scan]
    if:
      (always() && inputs.pr-merged == true && inputs.base-branches == 'develop' && needs.read-config-json.sonar_scanner == 'skip')
      || (always() && startsWith(github.ref, 'refs/heads/release/') && needs.sonar-scan.result == 'success')
      || (always() && inputs.pr-merged == true && inputs.base-branches == 'develop' && needs.read-config-json.sonar_scanner != 'skip' && needs.sonar-scan.result == 'success')
      || (always() && inputs.pr-merged == true && inputs.base-branches == 'main' && needs.sonar-scan.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build artifacts
        run: echo "Aqu√≠ ir√≠a el build de los artefactos"

  deploy-develop:
    needs: build
    if: always() && inputs.pr-merged == true && inputs.base-branches == 'develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Development
        run: echo "Aqu√≠ ir√≠a el despliegue a desarrollo"

  deploy-pre-produccion:
    needs: build
    if: always() && startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Pre-Production
        run: echo "Aqu√≠ ir√≠a el despliegue a pre-producci√≥n"

  deploy-produccion:
    needs: build
    if: always() && (inputs.pr-merged == true && inputs.base-branches == 'main')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: echo "Aqu√≠ ir√≠a el despliegue a producci√≥n"
      # ...steps para despliegue a producci√≥n...
      # 1. Taggear versi√≥n
      # 2. Desplegar artefacto versionado
      # 3. Ejecutar smoke tests y monitoreo post-deploy  # ...steps para despliegue a pre-producci√≥n...
